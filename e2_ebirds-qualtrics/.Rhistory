new_column_name == "Q32"~ 'state_province',
new_column_name == "Q39"~ 'prolific_id',
new_column_name == "Q40"~ 'attention_paid_to_birds',
new_column_name == "Q41"~ 'country',
TRUE ~ new_column_name))
write_csv(birds_dict, paste0(here(), '/e2_ebirds-qualtrics/e2_data_dictionary.csv'))
#function for replacing bad names with good ones
replace_names = function(mystring){
myrow = filter(birds_dict, column_name == mystring)
return(myrow$new_column_name)
}
birds <- birds %>%
rename_with(replace_names)
participant_level_birds <- birds %>%
select(-starts_with("bird_")) %>%
select(-starts_with("Recipient")) %>%
select(-starts_with("Location")) %>%
select(-starts_with("Q23")) %>%
select(-one_of("StartDate", "EndDate", "IPAddress", "ExternalReference","prolific_id", "UserLanguage","Q16"))
participant_level_birds <- participant_level_birds %>%
mutate(Duration = as.numeric(Duration),
self_rate_bird_knowledge = as.numeric(self_rate_bird_knowledge),
attention_paid_to_birds = as.numeric(attention_paid_to_birds),
attention_paid_to_birds = as.numeric(attention_paid_to_birds))
finished <- participant_level_birds %>%
group_by(Progress) %>%
summarize(n = n()) %>%
rename(percentage_finished = Progress)
freq_prog <- participant_level_birds %>%
group_by(Progress) %>%
summarize(n = n())
kable(finished) %>% kbl_mystyle()
duration <- participant_level_birds %>%
mutate(Duration = Duration/60) %>% #Transform to minutes
summarize(mean = mean(Duration), median = median(Duration), min = min(Duration), max = max(Duration))
kbl(duration, caption = "Time in minutes") %>%
kbl_mystyle()
freq_dur <- participant_level_birds %>%
group_by(Duration) %>%
summarize(n = n())
self_rate <- participant_level_birds %>%
filter(!is.na(self_rate_bird_knowledge)) %>%
summarize(mean = mean(self_rate_bird_knowledge), median = median(self_rate_bird_knowledge), min = min(self_rate_bird_knowledge), max = max(self_rate_bird_knowledge))
kbl(self_rate, caption = "How much you know about birds, 0-100") %>%
kbl_mystyle()
freq_rate <- participant_level_birds %>%
group_by(self_rate_bird_knowledge) %>%
summarize(n = n())
#View(participant_level_birds)
participant_level_birds <- participant_level_birds %>%
mutate(Progress = as.numeric(Progress))
nrow(participant_level_birds)
birds_pre_reshape = birds
birds <- birds_pre_reshape %>%
pivot_longer(starts_with("bird_"), names_to = "question", values_to = "response") %>%
separate(question, into = c("question_type","bird_id"), extra = "merge", sep = "\\.") %>%
select(one_of("ResponseId", "bird_id", "question_type", "response", "neigborhood_type","country","state_province", "self_rate_bird_knowledge","attention_paid_to_birds","comments", "Progress"))
birds_guessname <- birds %>%
filter(question_type == "bird_name_guess")
birds_seenbefore <- birds %>%
filter(question_type == "bird_seen_before")
guesses_per_bird <- birds_seenbefore %>%
filter(!is.na(response)) %>%
group_by(ResponseId) %>%
summarize(n = n())
answer_key <- read_csv(paste0(here(), '/data_ebird/selected_ebirds.csv'))
#Make strings matchable, and define 'short' correct as the last word in the bird's name
answer_key <- answer_key %>%
mutate(normalized_correct = tolower(common_name)) %>%
mutate(normalized_correct = str_replace_all(normalized_correct, ' ', '')) %>%
mutate(normalized_correct = str_replace_all(normalized_correct, '-', '')) %>%
mutate(normalized_short_correct = tolower(str_extract(common_name, '[A-z]+$')))
#Add the family list as a way to check if people guess something in the same family!
answer_key <- answer_key %>%
mutate(family_list = str_extract(family, "\\(.+\\)")) %>%
mutate(family_list = tolower(family_list)) %>%
mutate(family_list = str_remove_all(family_list, " and allies")) %>%
mutate(family_list = str_replace_all(family_list, " and", ",")) %>%
mutate(family_list = str_remove_all(family_list, "[ \\(\\)]")) %>%
mutate(family_list = str_replace_all(family_list, ",,", ",")) %>%
mutate(family_list = str_remove_all(family_list, ",$"))
#To add - alternate correct, e.g. duck/mallard, seagull/gull
answer_key <- answer_key %>%
mutate(alternate_short_correct = case_when(normalized_short_correct == 'gull' ~ 'seagull',
normalized_short_correct == 'mallard' ~ 'duck',
normalized_short_correct == 'goldfinch' ~ 'finch',
normalized_short_correct == 'bluejay' ~ 'jay',
TRUE ~ ""))
#normalize response data for matching!
birds_guessname <- birds_guessname %>%
mutate(normalized_response = tolower(response)) %>%
mutate(normalized_response = str_replace_all(normalized_response, regex("\\W+"), "")) %>%
mutate(normalized_short_response = tolower(str_extract(response, '[A-z]+$')))
birds_guessname <- birds_guessname %>%
left_join(answer_key, by = c("bird_id" = "species_code"))
rightmost_columns = c("bird_id", "response", "normalized_response", "normalized_correct", "exact_correct", "normalized_short_correct", "relaxed_correct" )
birds_guessname <- birds_guessname %>%
mutate(exact_correct = normalized_response == normalized_correct) %>%
mutate(exact_correct = if_else(is.na(exact_correct), FALSE, exact_correct))%>%
mutate(relaxed_correct = str_detect(normalized_response, normalized_short_correct))%>%
mutate(relaxed_correct = if_else(is.na(relaxed_correct), FALSE, relaxed_correct))%>%
mutate(relaxed_correct = if_else(str_detect(normalized_response, alternate_short_correct), TRUE, relaxed_correct)) %>%
select(-one_of(rightmost_columns), all_of(rightmost_columns ))
correct <- birds_guessname %>%
filter(exact_correct)
relaxed_correct <- birds_guessname %>%
filter(relaxed_correct != exact_correct)
wrong_answers <- birds_guessname %>%
filter(!exact_correct) %>%
filter(!relaxed_correct) %>%
select(one_of("normalized_correct", "response")) %>%
arrange(response)
nrow(wrong_answers) + nrow(relaxed_correct) + nrow(correct)
View(correct)
relaxed_correct <- birds_guessname %>%
filter(relaxed_correct != exact_correct)
View(relaxed_correct)
wrong_answers <- birds_guessname %>%
filter(!exact_correct) %>%
filter(!relaxed_correct) %>%
select(one_of("normalized_correct", "response")) %>%
arrange(response)
View(wrong_answers)
nrow(wrong_answers) + nrow(relaxed_correct) + nrow(correct)
library(knitr)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning =FALSE)
library(here)
library(tidyverse)
library(kableExtra)
#Custom function for nice tables
kbl_mystyle = function(kable_input){
kable_styling(kable_input, full_width = TRUE,
htmltable_class = "lightable_striped",
position = "left")
}
#Read in original data, with weird qualtrics column names...
birds <- read_csv(paste0(here(), '/e2_ebirds-qualtrics/Ebirds Naming Experiment_June 5, 2022_16.34.csv')) %>%
tail(-2) %>%
filter(Status != "Survey Preview") #Immediately drop preview data!!
#Make a table to hold the list of variable names
birds_dict <- read_csv(paste0(here(), '/e2_ebirds-qualtrics/Ebirds Naming Experiment_February 4, 2022_14.21.csv'), n_max = 2) %>%
add_rownames() %>%
mutate(label = case_when(rowname == 1 ~ "question_text",
rowname == 2 ~ "qualtrics_string",
TRUE ~ "")) %>%
select(-rowname)%>%
pivot_longer(cols = !all_of(c("label")), names_to = c("column_name")) %>%
pivot_wider(names_from = c("label"), values_from = c("value")) %>%
mutate(q_id = str_extract(column_name, "Q[0-9]+")) %>%
mutate(q_id = if_else(is.na(q_id), str_extract(column_name, "^[A-z]+"), q_id)) %>%
mutate(q_id = if_else(q_id == "Q23", column_name, q_id))%>%
mutate(bird_id = if_else(q_id == 'Q30', str_extract(question_text, "^[a-z0-9]+"), "")) %>%
add_rownames() %>%
mutate(item_id = str_extract(column_name, "^[0-9]+")) %>%
mutate(item_id = if_else(is.na(item_id), as.character(200 + as.numeric(rowname)), item_id))
birds_dict_1 = birds_dict %>%
filter(q_id == "Q30") %>% #Slice off the critical questions, which have the bird name strings!
select(one_of("bird_id", "item_id"))
birds_dict <- birds_dict %>%
select(-bird_id) %>%
left_join(birds_dict_1) %>%
mutate(column_prefix = case_when(q_id == "Q30" ~ "bird_name_guess",
q_id == "Q38" ~ "bird_seen_before",
TRUE ~ q_id)) %>%
mutate(new_column_name = if_else(is.na(bird_id), column_prefix, paste(column_prefix, bird_id, sep = '.')))%>%
select(-one_of("rowname", "q_id","item_id","column_prefix")) %>%
mutate(new_column_name = case_when(new_column_name == "Q21"~ 'generated_bird_list',
new_column_name == "Q22"~ 'neighborhood_type',
new_column_name == "Q24"~ 'comments',
new_column_name == "Q31"~ 'self_rate_bird_knowledge',
new_column_name == "Q32"~ 'state_province',
new_column_name == "Q39"~ 'prolific_id',
new_column_name == "Q40"~ 'attention_paid_to_birds',
new_column_name == "Q41"~ 'country',
TRUE ~ new_column_name))
write_csv(birds_dict, paste0(here(), '/e2_ebirds-qualtrics/e2_data_dictionary.csv'))
#function for replacing bad names with good ones
replace_names = function(mystring){
myrow = filter(birds_dict, column_name == mystring)
return(myrow$new_column_name)
}
birds <- birds %>%
rename_with(replace_names)
participant_level_birds <- birds %>%
select(-starts_with("bird_")) %>%
select(-starts_with("Recipient")) %>%
select(-starts_with("Location")) %>%
select(-starts_with("Q23")) %>%
select(-one_of("StartDate", "EndDate", "IPAddress", "ExternalReference","prolific_id", "UserLanguage","Q16"))
participant_level_birds <- participant_level_birds %>%
mutate(Duration = as.numeric(Duration),
self_rate_bird_knowledge = as.numeric(self_rate_bird_knowledge),
attention_paid_to_birds = as.numeric(attention_paid_to_birds),
attention_paid_to_birds = as.numeric(attention_paid_to_birds))
finished <- participant_level_birds %>%
group_by(Progress) %>%
summarize(n = n()) %>%
rename(percentage_finished = Progress)
freq_prog <- participant_level_birds %>%
group_by(Progress) %>%
summarize(n = n())
kable(finished) %>% kbl_mystyle()
duration <- participant_level_birds %>%
mutate(Duration = Duration/60) %>% #Transform to minutes
summarize(mean = mean(Duration), median = median(Duration), min = min(Duration), max = max(Duration))
kbl(duration, caption = "Time in minutes") %>%
kbl_mystyle()
freq_dur <- participant_level_birds %>%
group_by(Duration) %>%
summarize(n = n())
self_rate <- participant_level_birds %>%
filter(!is.na(self_rate_bird_knowledge)) %>%
summarize(mean = mean(self_rate_bird_knowledge), median = median(self_rate_bird_knowledge), min = min(self_rate_bird_knowledge), max = max(self_rate_bird_knowledge))
kbl(self_rate, caption = "How much you know about birds, 0-100") %>%
kbl_mystyle()
freq_rate <- participant_level_birds %>%
group_by(self_rate_bird_knowledge) %>%
summarize(n = n())
#View(participant_level_birds)
participant_level_birds <- participant_level_birds %>%
mutate(Progress = as.numeric(Progress))
nrow(participant_level_birds)
birds_pre_reshape = birds
birds <- birds_pre_reshape %>%
pivot_longer(starts_with("bird_"), names_to = "question", values_to = "response") %>%
separate(question, into = c("question_type","bird_id"), extra = "merge", sep = "\\.") %>%
select(one_of("ResponseId", "bird_id", "question_type", "response", "neigborhood_type","country","state_province", "self_rate_bird_knowledge","attention_paid_to_birds","comments", "Progress"))
birds_guessname <- birds %>%
filter(question_type == "bird_name_guess")
birds_seenbefore <- birds %>%
filter(question_type == "bird_seen_before")
guesses_per_bird <- birds_seenbefore %>%
filter(!is.na(response)) %>%
group_by(ResponseId) %>%
summarize(n = n())
nrow(birds_guessname)
answer_key <- read_csv(paste0(here(), '/data_ebird/selected_ebirds.csv'))
#Make strings matchable, and define 'short' correct as the last word in the bird's name
answer_key <- answer_key %>%
mutate(normalized_correct = tolower(common_name)) %>%
mutate(normalized_correct = str_replace_all(normalized_correct, ' ', '')) %>%
mutate(normalized_correct = str_replace_all(normalized_correct, '-', '')) %>%
mutate(normalized_short_correct = tolower(str_extract(common_name, '[A-z]+$')))
#Add the family list as a way to check if people guess something in the same family!
answer_key <- answer_key %>%
mutate(family_list = str_extract(family, "\\(.+\\)")) %>%
mutate(family_list = tolower(family_list)) %>%
mutate(family_list = str_remove_all(family_list, " and allies")) %>%
mutate(family_list = str_replace_all(family_list, " and", ",")) %>%
mutate(family_list = str_remove_all(family_list, "[ \\(\\)]")) %>%
mutate(family_list = str_replace_all(family_list, ",,", ",")) %>%
mutate(family_list = str_remove_all(family_list, ",$"))
#To add - alternate correct, e.g. duck/mallard, seagull/gull
answer_key <- answer_key %>%
mutate(alternate_short_correct = case_when(normalized_short_correct == 'gull' ~ 'seagull',
normalized_short_correct == 'mallard' ~ 'duck',
normalized_short_correct == 'goldfinch' ~ 'finch',
normalized_short_correct == 'bluejay' ~ 'jay',
TRUE ~ ""))
#normalize response data for matching!
birds_guessname <- birds_guessname %>%
mutate(normalized_response = tolower(response)) %>%
mutate(normalized_response = str_replace_all(normalized_response, regex("\\W+"), "")) %>%
mutate(normalized_short_response = tolower(str_extract(response, '[A-z]+$')))
birds_guessname <- birds_guessname %>%
left_join(answer_key, by = c("bird_id" = "species_code"))
nrow(birds_guessname)
rightmost_columns = c("bird_id", "response", "normalized_response", "normalized_correct", "exact_correct", "normalized_short_correct", "relaxed_correct" )
birds_guessname <- birds_guessname %>%
mutate(exact_correct = normalized_response == normalized_correct) %>%
mutate(exact_correct = if_else(is.na(exact_correct), FALSE, exact_correct))%>%
mutate(relaxed_correct = str_detect(normalized_response, normalized_short_correct))%>%
mutate(relaxed_correct = if_else(is.na(relaxed_correct), FALSE, relaxed_correct))%>%
mutate(relaxed_correct = if_else(str_detect(normalized_response, alternate_short_correct), TRUE, relaxed_correct)) %>%
select(-one_of(rightmost_columns), all_of(rightmost_columns ))
correct <- birds_guessname %>%
filter(exact_correct)
incorrect <- birds_guessname %>%
filter(!exact_correct)
nrow(correct)
nrow(incorrect)
View(incorrect)
freq_names <- birds_guessname %>%
group_by(normalized_response) %>%
summarize(n=n())
View(freq_names)
nrow(birds_guessname)
birds_responses <- birds_guessname %>%
left_join(birds_seenbefore)
nrow(birds_responses)
birds_seenbefore$response
birds_guessname$response
names(birds_responses)
birds_responses$response
birds_guessname <- birds %>%
filter(question_type == "bird_name_guess")
birds_seenbefore <- birds %>%
filter(question_type == "bird_seen_before") %>%
transmute(bird_seen_before = response) %>%
select(-question_type)
names(birds_seenbefore)
birds_seenbefore <- birds %>%
filter(question_type == "bird_seen_before") %>%
transmute(bird_seen_before = response) %>%
select(-question_type)
birds_seenbefore <- birds %>%
filter(question_type == "bird_seen_before") %>%
transmute(bird_seen_before = response) %>%
select(-one_of("question_type"))
nrow(birds_seenbefore)
birds_responses <- birds_guessname %>%
left_join(birds_seenbefore) %>%
mutate(saw_bird = !is.na(response) | !is.na(bird_seen_before))
names(birds_seenbefore)
birds_seenbefore <- birds %>%
filter(question_type == "bird_seen_before") %>%
mutate(bird_seen_before = response) %>%
select(-one_of("question_type"))
names(birds_seenbefore)
birds_responses <- birds_guessname %>%
left_join(birds_seenbefore) %>%
mutate(saw_bird = !is.na(response) | !is.na(bird_seen_before))
birds_guessname <- birds %>%
filter(question_type == "bird_name_guess")
birds_seenbefore <- birds %>%
filter(question_type == "bird_seen_before") %>%
mutate(bird_seen_before = response) %>%
select(-one_of("question_type", "response"))
birds_responses <- birds_guessname %>%
left_join(birds_seenbefore) %>%
mutate(saw_bird = !is.na(response) | !is.na(bird_seen_before))
nrow(birds_responses)
View(birds_responses)
library(knitr)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning =FALSE)
library(here)
library(tidyverse)
library(kableExtra)
#Custom function for nice tables
kbl_mystyle = function(kable_input){
kable_styling(kable_input, full_width = TRUE,
htmltable_class = "lightable_striped",
position = "left")
}
#Read in original data, with weird qualtrics column names...
birds <- read_csv(paste0(here(), '/e2_ebirds-qualtrics/Ebirds Naming Experiment_June 5, 2022_16.34.csv')) %>%
tail(-2) %>%
filter(Status != "Survey Preview") #Immediately drop preview data!!
#Make a table to hold the list of variable names
birds_dict <- read_csv(paste0(here(), '/e2_ebirds-qualtrics/Ebirds Naming Experiment_February 4, 2022_14.21.csv'), n_max = 2) %>%
add_rownames() %>%
mutate(label = case_when(rowname == 1 ~ "question_text",
rowname == 2 ~ "qualtrics_string",
TRUE ~ "")) %>%
select(-rowname)%>%
pivot_longer(cols = !all_of(c("label")), names_to = c("column_name")) %>%
pivot_wider(names_from = c("label"), values_from = c("value")) %>%
mutate(q_id = str_extract(column_name, "Q[0-9]+")) %>%
mutate(q_id = if_else(is.na(q_id), str_extract(column_name, "^[A-z]+"), q_id)) %>%
mutate(q_id = if_else(q_id == "Q23", column_name, q_id))%>%
mutate(bird_id = if_else(q_id == 'Q30', str_extract(question_text, "^[a-z0-9]+"), "")) %>%
add_rownames() %>%
mutate(item_id = str_extract(column_name, "^[0-9]+")) %>%
mutate(item_id = if_else(is.na(item_id), as.character(200 + as.numeric(rowname)), item_id))
birds_dict_1 = birds_dict %>%
filter(q_id == "Q30") %>% #Slice off the critical questions, which have the bird name strings!
select(one_of("bird_id", "item_id"))
birds_dict <- birds_dict %>%
select(-bird_id) %>%
left_join(birds_dict_1) %>%
mutate(column_prefix = case_when(q_id == "Q30" ~ "bird_name_guess",
q_id == "Q38" ~ "bird_seen_before",
TRUE ~ q_id)) %>%
mutate(new_column_name = if_else(is.na(bird_id), column_prefix, paste(column_prefix, bird_id, sep = '.')))%>%
select(-one_of("rowname", "q_id","item_id","column_prefix")) %>%
mutate(new_column_name = case_when(new_column_name == "Q21"~ 'generated_bird_list',
new_column_name == "Q22"~ 'neighborhood_type',
new_column_name == "Q24"~ 'comments',
new_column_name == "Q31"~ 'self_rate_bird_knowledge',
new_column_name == "Q32"~ 'state_province',
new_column_name == "Q39"~ 'prolific_id',
new_column_name == "Q40"~ 'attention_paid_to_birds',
new_column_name == "Q41"~ 'country',
TRUE ~ new_column_name))
write_csv(birds_dict, paste0(here(), '/e2_ebirds-qualtrics/e2_data_dictionary.csv'))
#function for replacing bad names with good ones
replace_names = function(mystring){
myrow = filter(birds_dict, column_name == mystring)
return(myrow$new_column_name)
}
birds <- birds %>%
rename_with(replace_names)
participant_level_birds <- birds %>%
select(-starts_with("bird_")) %>%
select(-starts_with("Recipient")) %>%
select(-starts_with("Location")) %>%
select(-starts_with("Q23")) %>%
select(-one_of("StartDate", "EndDate", "IPAddress", "ExternalReference","prolific_id", "UserLanguage","Q16"))
participant_level_birds <- participant_level_birds %>%
mutate(Duration = as.numeric(Duration),
self_rate_bird_knowledge = as.numeric(self_rate_bird_knowledge),
attention_paid_to_birds = as.numeric(attention_paid_to_birds),
attention_paid_to_birds = as.numeric(attention_paid_to_birds))
finished <- participant_level_birds %>%
group_by(Progress) %>%
summarize(n = n()) %>%
rename(percentage_finished = Progress)
freq_prog <- participant_level_birds %>%
group_by(Progress) %>%
summarize(n = n())
kable(finished) %>% kbl_mystyle()
duration <- participant_level_birds %>%
mutate(Duration = Duration/60) %>% #Transform to minutes
summarize(mean = mean(Duration), median = median(Duration), min = min(Duration), max = max(Duration))
kbl(duration, caption = "Time in minutes") %>%
kbl_mystyle()
freq_dur <- participant_level_birds %>%
group_by(Duration) %>%
summarize(n = n())
self_rate <- participant_level_birds %>%
filter(!is.na(self_rate_bird_knowledge)) %>%
summarize(mean = mean(self_rate_bird_knowledge), median = median(self_rate_bird_knowledge), min = min(self_rate_bird_knowledge), max = max(self_rate_bird_knowledge))
kbl(self_rate, caption = "How much you know about birds, 0-100") %>%
kbl_mystyle()
freq_rate <- participant_level_birds %>%
group_by(self_rate_bird_knowledge) %>%
summarize(n = n())
#View(participant_level_birds)
participant_level_birds <- participant_level_birds %>%
mutate(Progress = as.numeric(Progress))
nrow(participant_level_birds)
birds_pre_reshape = birds
birds <- birds_pre_reshape %>%
pivot_longer(starts_with("bird_"), names_to = "question", values_to = "response") %>%
separate(question, into = c("question_type","bird_id"), extra = "merge", sep = "\\.") %>%
select(one_of("ResponseId", "bird_id", "question_type", "response", "neigborhood_type","country","state_province", "self_rate_bird_knowledge","attention_paid_to_birds","comments", "Progress"))
birds_guessname <- birds %>%
filter(question_type == "bird_name_guess")
birds_seenbefore <- birds %>%
filter(question_type == "bird_seen_before") %>%
mutate(bird_seen_before = response) %>%
select(-one_of("question_type", "response"))
birds_responses <- birds_guessname %>%
left_join(birds_seenbefore) %>%
mutate(participant_saw_bird = !is.na(response) | !is.na(bird_seen_before))
guesses_per_bird <- birds_responses %>%
filter(!is.na(response)) %>%
group_by(ResponseId) %>%
summarize(n = n())
answer_key <- read_csv(paste0(here(), '/data_ebird/selected_ebirds.csv'))
#Make strings matchable, and define 'short' correct as the last word in the bird's name
answer_key <- answer_key %>%
mutate(normalized_correct = tolower(common_name)) %>%
mutate(normalized_correct = str_replace_all(normalized_correct, ' ', '')) %>%
mutate(normalized_correct = str_replace_all(normalized_correct, '-', '')) %>%
mutate(normalized_short_correct = tolower(str_extract(common_name, '[A-z]+$')))
#Add the family list as a way to check if people guess something in the same family!
answer_key <- answer_key %>%
mutate(family_list = str_extract(family, "\\(.+\\)")) %>%
mutate(family_list = tolower(family_list)) %>%
mutate(family_list = str_remove_all(family_list, " and allies")) %>%
mutate(family_list = str_replace_all(family_list, " and", ",")) %>%
mutate(family_list = str_remove_all(family_list, "[ \\(\\)]")) %>%
mutate(family_list = str_replace_all(family_list, ",,", ",")) %>%
mutate(family_list = str_remove_all(family_list, ",$"))
#To add - alternate correct, e.g. duck/mallard, seagull/gull
answer_key <- answer_key %>%
mutate(alternate_short_correct = case_when(normalized_short_correct == 'gull' ~ 'seagull',
normalized_short_correct == 'mallard' ~ 'duck',
normalized_short_correct == 'goldfinch' ~ 'finch',
normalized_short_correct == 'bluejay' ~ 'jay',
TRUE ~ ""))
#normalize response data for matching!
birds_guessname <- birds_guessname %>%
mutate(normalized_response = tolower(response)) %>%
mutate(normalized_response = str_replace_all(normalized_response, regex("\\W+"), "")) %>%
mutate(normalized_short_response = tolower(str_extract(response, '[A-z]+$')))
birds_guessname <- birds_guessname %>%
left_join(answer_key, by = c("bird_id" = "species_code"))
rightmost_columns = c("bird_id", "response", "normalized_response", "normalized_correct", "exact_correct", "normalized_short_correct", "relaxed_correct" )
birds_guessname <- birds_guessname %>%
mutate(exact_correct = normalized_response == normalized_correct) %>%
mutate(exact_correct = if_else(is.na(exact_correct), FALSE, exact_correct))%>%
mutate(relaxed_correct = str_detect(normalized_response, normalized_short_correct))%>%
mutate(relaxed_correct = if_else(is.na(relaxed_correct), FALSE, relaxed_correct))%>%
mutate(relaxed_correct = if_else(str_detect(normalized_response, alternate_short_correct), TRUE, relaxed_correct)) %>%
select(-one_of(rightmost_columns), all_of(rightmost_columns ))
correct <- birds_guessname %>%
filter(exact_correct)
incorrect <- birds_guessname %>%
filter(!exact_correct)
freq_names <- birds_guessname %>%
group_by(normalized_response) %>%
summarize(n=n())
relaxed_correct <- birds_guessname %>%
filter(relaxed_correct != exact_correct)
wrong_answers <- birds_guessname %>%
filter(!exact_correct) %>%
filter(!relaxed_correct) %>%
select(one_of("normalized_correct", "response")) %>%
arrange(response)
nrow(wrong_answers) + nrow(relaxed_correct) + nrow(correct)
View(freq_names)
freq_names <- birds_guessname %>%
group_by(normalized_correct) %>%
summarize(n=n())
View(freq_names)
guesses_per_bird <- birds_responses %>%
filter(!is.na(response)) %>%
group_by(ResponseId) %>%
summarize(n = n())
View(guesses_per_bird)
